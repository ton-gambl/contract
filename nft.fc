#include "stdlib.fc";

;;
;; TON LOTTERY '7 of 49'
;; NFT Item (ticket)
;; Oficial Bot: https://t.me/LotteryTonBot
;;
;; Lottery rules:
;; Guess 7 numbers from 1 to 49 and win the Jackpot ðŸ’Ž
;; 2 of 7 - Ñ…1
;; 3 of 7 - Ñ…3
;; 4 of 7 - Ñ…7
;; 5 of 7 - Ñ…70
;; 6 of 7 - Ñ…2000
;; 7 of 7 - Jackpot ðŸ’Ž (min Ñ…10000)
;;

;;
;; op codes
;;

int op::msg_calc() asm "1 PUSHINT";
int op::msg_win() asm "2 PUSHINT";
int op::ticket_random() asm "3 PUSHINT";

int op::ownership_assigned() asm "0x05138d91 PUSHINT";
int op::excesses() asm "0xd53276db PUSHINT";
int op::transfer() asm "0x5fcc3d14 PUSHINT";
int op::get_static_data() asm "0x2fcb26a2 PUSHINT";
int op::report_static_data() asm "0x8b771735 PUSHINT";

int builder_null?(builder b) asm "ISNULL";
int workchain() asm "0 PUSHINT";

() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}

int min_tons_for_storage() asm "10000000 PUSHINT"; ;; 0.01 TON

(int, int, slice, slice, cell, cell, int, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, collection_address, ds~load_msg_addr(), ds~load_ref(), ds~load_ref(), ds~load_uint(32), ds~load_ref());
    } else {  
      return (0, index, collection_address, null(), null(), null(), null(), null()); 
    }
}

() store_data(int index, slice collection_address, slice owner_address, cell content, cell numbers, int round_index, cell random_numbers) impure {
    set_data(
        begin_cell()
            .store_uint(index, 64)
            .store_slice(collection_address)
            .store_slice(owner_address)
            .store_ref(content)
            .store_ref(numbers)
            .store_uint(round_index, 32)
            .store_ref(random_numbers) ;; the numbers generated for the drawing (initially 0 0 0 0 0 0 0)
            .end_cell()
    );
}

(int, cell) math_win(cell random_numbers, cell numbers) impure {

    slice rand = random_numbers.begin_parse();
    int r1 = rand~load_uint(8);
    int r2 = rand~load_uint(8);
    int r3 = rand~load_uint(8);
    int r4 = rand~load_uint(8);
    int r5 = rand~load_uint(8);
    int r6 = rand~load_uint(8);
    int r7 = rand~load_uint(8);

    slice numb = numbers.begin_parse();
    int n1 = numb~load_uint(8);
    int n2 = numb~load_uint(8);
    int n3 = numb~load_uint(8);
    int n4 = numb~load_uint(8);
    int n5 = numb~load_uint(8);
    int n6 = numb~load_uint(8);
    int n7 = numb~load_uint(8);
    
    int code = 0;
    if((n1 == r1) | (n1 == r2) | (n1 == r3) | (n1 == r4) | (n1 == r5) | (n1 == r6) | (n1 == r7)) {
      code += 1;
    }
    if((n2 == r1) | (n2 == r2) | (n2 == r3) | (n2 == r4) | (n2 == r5) | (n2 == r6) | (n2 == r7)) {
      code += 1;
    }
    if((n3 == r1) | (n3 == r2) | (n3 == r3) | (n3 == r4) | (n3 == r5) | (n3 == r6) | (n3 == r7)) {
      code += 1;
    }
    if((n4 == r1) | (n4 == r2) | (n4 == r3) | (n4 == r4) | (n4 == r5) | (n4 == r6) | (n4 == r7)) {
      code += 1;
    }
    if((n5 == r1) | (n5 == r2) | (n5 == r3) | (n5 == r4) | (n5 == r5) | (n5 == r6) | (n5 == r7)) {
      code += 1;
    }
    if((n6 == r1) | (n6 == r2) | (n6 == r3) | (n6 == r4) | (n6 == r5) | (n6 == r6) | (n6 == r7)) {
      code += 1;
    }
    if((n7 == r1) | (n7 == r2) | (n7 == r3) | (n7 == r4) | (n7 == r5) | (n7 == r6) | (n7 == r7)) {
      code += 1;
    }
    
  int win = 0;
  cell win_msg = begin_cell().store_slice("You guessed 0 out of 7! Better luck next time!").end_cell();

  if(code == 1) {
    win = 0;
    win_msg = begin_cell().store_slice("You guessed 1 out of 7! Better luck next time!").end_cell();
  }
  if(code == 2) {
    win = 1;
    win_msg = begin_cell().store_slice("You guessed 2 out of 7! Not bad.").end_cell();
  }                                                                                                                  
  if(code == 3) {
    win = 3;
    win_msg = begin_cell().store_slice("You guessed 3 out of 7! Not bad.").end_cell();
  }
  if(code == 4) {
    win = 7;
    win_msg = begin_cell().store_slice("You guessed 4 out of 7! Not bad.").end_cell();
  }
  if(code == 5) {
    win = 70;
    win_msg = begin_cell().store_slice("You guessed 5 out of 7! Ð¡ongratulations!").end_cell();
  }
  if(code == 6) {
    win = 2000;
    win_msg = begin_cell().store_slice("You guessed 6 out of 7! Ð¡ongratulations!").end_cell();
  }
  if(code == 7) {
    win = 777;
    win_msg = begin_cell().store_slice("WoW! You guessed 7 out of 7 and won the Jackpot! Ð¡ongratulations!").end_cell();
  }
  return (win, win_msg);
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) 
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }
  send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, int index, slice collection_address, slice owner_address, cell content, cell numbers, int round_index, cell random_numbers, slice sender_address, int query_id, slice in_msg_body, int fwd_fees) impure inline {
    throw_unless(401, equal_slices(sender_address, owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); 
    int forward_amount = in_msg_body~load_coins();
    throw_unless(708, slice_bits(in_msg_body) >= 1);

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    
    int need_response = response_destination.preload_uint(2) != 0; 
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); 

    if (forward_amount) {
      send_msg(new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1); 
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(response_destination, rest_amount, op::excesses(), query_id, null(), 1);
    }

    store_data(index, collection_address, new_owner_address, content, numbers, round_index, random_numbers);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

  if (in_msg_body.slice_empty?()) { 
      return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) { 
      return ();
  }

  slice sender_address = cs~load_msg_addr();

  cs~load_msg_addr(); 
  cs~load_coins(); 
  cs~skip_bits(1); 
  cs~load_coins(); 
  int fwd_fee = muldiv(cs~load_coins(), 3, 2); 

  (int init?, int index, slice collection_address, slice owner_address, cell content, cell numbers, int round_index, cell random_numbers) = load_data();

  if (~ init?) {
    throw_unless(405, equal_slices(collection_address, sender_address));
  
    store_data(index, collection_address, in_msg_body~load_msg_addr(), in_msg_body~load_ref(), in_msg_body~load_ref(), in_msg_body~load_uint(32), in_msg_body~load_ref());
    return ();
  }

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  ;;
  ;; Gets random numbers and compares them with selected numbers
  ;; Sends the number of matches to send the winnings
  ;; 

  if (op == op::msg_calc()) { 
  throw_unless(405, equal_slices(collection_address, sender_address));

    cell rand_numbers = in_msg_body~load_ref();
    (int win, cell win_msg) = math_win(rand_numbers, numbers);

    cell msg_body = begin_cell()
      .store_uint(index, 64)
      .store_uint(round_index, 32)
      .store_uint(win, 32)
      .store_ref(win_msg)
      .end_cell();

    var msg = begin_cell()
      .store_uint(0x10, 6) 
      .store_slice(sender_address) 
      .store_grams(msg_value) 
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(6, 32) 
      .store_uint(query_id, 64)
      .store_ref(msg_body)
      .end_cell();
    send_raw_message(msg, 128);

  store_data(index, collection_address, owner_address, content, numbers, round_index, rand_numbers);
  return ();
  }

  ;;
  ;; Sends the winnings to the address of the ticket holder
  ;;

  if (op == op::msg_win()) {
  throw_unless(406, equal_slices(collection_address, sender_address));

    slice win_msg = in_msg_body~load_ref().begin_parse();

    var msg = begin_cell()
      .store_uint(0x10, 6) 
      .store_slice(owner_address)
      .store_coins(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0, 32) 
      .store_slice(win_msg)
      .end_cell();
    send_raw_message(msg, 128);
  
  return ();
  }

  ;;
  ;; ONLY FOR NFT TICKET WITH RANDOM NUMBERS
  ;; The collection requests the generated random numbers for the drawing from the ticket
  ;;

  if (op == op::ticket_random()) { ;; NFT ticket with random numbers
  throw_unless(402, equal_slices(collection_address, sender_address));

    slice message = in_msg_body~load_ref().begin_parse();
    int next_index = message~load_uint(64); 

    cell msg_body = begin_cell()
      .store_uint(index, 64)
      .store_uint(round_index, 32)
      .store_ref(numbers)
      .store_uint(next_index, 64)
      .end_cell();

    var msg = begin_cell()
      .store_uint(0x10, 6) 
      .store_slice(sender_address) 
      .store_grams(msg_value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(5, 32) 
      .store_uint(query_id, 64)
      .store_ref(msg_body)
      .end_cell();
    send_raw_message(msg, 128);

  return ();
  }

  if (op == op::transfer()) {
    transfer_ownership(my_balance, index, collection_address, owner_address, content, numbers, round_index, random_numbers, sender_address, query_id, in_msg_body, fwd_fee);
  return ();
  }

  if (op == op::get_static_data()) {
    send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  
  return ();
  }

  throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
  (int init?, int index, slice collection_address, slice owner_address, cell content, _, _, _) = load_data();
  return (init?, index, collection_address, owner_address, content);
}

(int, int, slice, slice, cell, int, cell) get_nft_info() method_id {
  (int init?, int index, slice collection_address, slice owner_address, _, cell numbers, int round_index, cell random_numbers) = load_data();
  return (init?, index, collection_address, owner_address, numbers, round_index, random_numbers);
}